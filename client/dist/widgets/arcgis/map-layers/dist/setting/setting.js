System.register(["jimu-core","jimu-ui","jimu-ui/advanced/setting-components","jimu-arcgis","jimu-ui/advanced/data-source-selector"],(function(t){var e,s,i,o,a;return{setters:[function(t){e=t},function(t){s=t},function(t){i=t},function(t){o=t},function(t){a=t}],execute:function(){t(function(t){var e={};function s(i){if(e[i])return e[i].exports;var o=e[i]={i:i,l:!1,exports:{}};return t[i].call(o.exports,o,o.exports,s),o.l=!0,o.exports}return s.m=t,s.c=e,s.d=function(t,e,i){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},s.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(s.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)s.d(i,o,function(e){return t[e]}.bind(null,o));return i},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="",s(s.s=505)}({0:function(t,s){t.exports=e},1:function(t,e){t.exports=s},14:function(t,e){t.exports=a},2:function(t,e){t.exports=i},4:function(t,e){t.exports=o},505:function(t,e,s){"use strict";s.r(e),s.d(e,"default",(function(){return j}));var i=s(0),o=s(1),a=s(2),n=s(14),r=s(4),c="Source",p="Zoom to",l="Adjust layer transparency",u="View layer details",d="Options",h="Toggle layer visibility",g="Show layers for map data only",m="Interact with a Map widget";class b extends i.React.PureComponent{constructor(t){super(t),this.unmount=!1,this.setMapThumbUrl=t=>{if(t||this.setState({mapThumbUrl:null}),this.props.portUrl&&this.props.portUrl!==Object(i.getAppStore)().getState().portalUrl)i.esri.restPortal.searchItems({q:"id:"+t,portal:this.props.portUrl+"/sharing/rest"}).then(t=>{if(!this.unmount)if(t.results[0]){const e=`${this.props.portUrl}/sharing/rest/content/items/${t.results[0].id}/info/`+t.results[0].thumbnail;this.setState({mapThumbUrl:e})}else this.setState({mapThumbUrl:null})});else{const e=Object(i.getAppStore)().getState().portalUrl,s=i.SessionManager.getInstance().getSessionByUrl(e);i.esri.restPortal.searchItems({q:"id:"+t,authentication:i.SessionManager.getInstance().getSessionByUrl(e),portal:e+"/sharing/rest"}).then(t=>{if(!this.unmount)if(t.results[0]){const i=`${e}/sharing/rest/content/items/${t.results[0].id}/info/${t.results[0].thumbnail}?token=${null==s?void 0:s.token}`;this.setState({mapThumbUrl:i})}else this.setState({mapThumbUrl:null})})}},this.state={mapThumbUrl:null}}componentDidMount(){this.unmount=!1,this.setMapThumbUrl(this.props.mapItemId)}componentDidUpdate(t,e){t.mapItemId!==this.props.mapItemId&&this.setMapThumbUrl(this.props.mapItemId)}componentWillUnmount(){this.unmount=!0}render(){return this.state.mapThumbUrl?i.React.createElement(o.ImageWithParam,{imageParam:{url:this.state.mapThumbUrl}}):i.React.createElement(o.ImageWithParam,{imageParam:{}})}}class j extends i.React.PureComponent{constructor(t){super(t),this.supportedDsTypes=Object(i.Immutable)([r.DataSourceTypes.WebMap,r.DataSourceTypes.WebScene]),this.getPortUrl=()=>Object(i.getAppStore)().getState().portalUrl,this.onRadioChange=t=>{this.props.onSettingChange({id:this.props.id,config:this.props.config.set("useMapWidget",t)}),this.setState({useMapWidget:t})},this.onToolsChanged=(t,e)=>{this.props.onSettingChange({id:this.props.id,config:this.props.config.set(e,t)})},this.onOptionsChanged=(t,e)=>{this.props.onSettingChange({id:this.props.id,config:this.props.config.set(e,t)})},this.onToggleUseDataEnabled=t=>{this.props.onSettingChange({id:this.props.id,useDataSourcesEnabled:t})},this.onDataSourceChange=t=>{t&&this.props.onSettingChange({id:this.props.id,useDataSources:t})},this.onMapWidgetSelected=t=>{this.props.onSettingChange({id:this.props.id,useMapWidgetIds:t})},this.state={useMapWidget:this.props.config.useMapWidget||!1}}render(){var t;const e=this.getPortUrl();let s=null,r=null,j=null,f=null,S=null;return r=Object(i.jsx)("div",{className:"data-selector-section"},Object(i.jsx)(a.SettingRow,null,Object(i.jsx)(n.DataSourceSelector,{types:this.supportedDsTypes,useDataSources:this.props.useDataSources,useDataSourcesEnabled:!0,mustUseDataSource:!0,onChange:this.onDataSourceChange,widgetId:this.props.id})),e&&this.props.dsJsons&&this.props.useDataSources&&1===this.props.useDataSources.length&&Object(i.jsx)(a.SettingRow,null,Object(i.jsx)("div",{className:"w-100"},Object(i.jsx)("div",{className:"webmap-thumbnail",title:null===(t=this.props.dsJsons[this.props.useDataSources[0].dataSourceId])||void 0===t?void 0:t.label},Object(i.jsx)(b,{mapItemId:this.props.dsJsons[this.props.useDataSources[0].dataSourceId]?this.props.dsJsons[this.props.useDataSources[0].dataSourceId].itemId:null,portUrl:this.props.dsJsons[this.props.useDataSources[0].dataSourceId]?this.props.dsJsons[this.props.useDataSources[0].dataSourceId].portalUrl:null}))))),j=Object(i.jsx)("div",{className:"map-selector-section"},Object(i.jsx)(a.SettingRow,null,Object(i.jsx)(a.JimuMapViewSelector,{onSelect:this.onMapWidgetSelected,useMapWidgetIds:this.props.useMapWidgetIds}))),this.state.useMapWidget?(s=j,f=Object(i.jsx)(i.React.Fragment,null,Object(i.jsx)(a.SettingRow,{label:Object(i.jsx)(i.FormattedMessage,{id:"goto",defaultMessage:p})},Object(i.jsx)(o.Switch,{className:"can-x-switch",checked:this.props.config&&this.props.config.goto||!1,"data-key":"goto",onChange:t=>{this.onToolsChanged(t.target.checked,"goto")}})),Object(i.jsx)(a.SettingRow,{label:Object(i.jsx)(i.FormattedMessage,{id:"transparency",defaultMessage:l})},Object(i.jsx)(o.Switch,{className:"can-x-switch",checked:this.props.config&&this.props.config.opacity||!1,"data-key":"opacity",onChange:t=>{this.onToolsChanged(t.target.checked,"opacity")}}))),S=Object(i.jsx)(a.SettingRow,{label:Object(i.jsx)(i.FormattedMessage,{id:"setVisibility",defaultMessage:h})},Object(i.jsx)(o.Switch,{className:"can-x-switch",checked:this.props.config&&this.props.config.setVisibility||!1,"data-key":"setVisibility",onChange:t=>{this.onOptionsChanged(t.target.checked,"setVisibility")}}))):s=r,Object(i.jsx)("div",{css:(x=this.props.theme,i.css`
    .widget-setting-layerlist{
      font-weight: lighter;
      font-size: 13px;

      .source-descript {
        color: ${x.colors.palette.dark[600]};	
      }

      .webmap-thumbnail{
        cursor: auto;
        width: 100%;
        height: 120px;
        overflow: hidden;
        padding: 1px;
        border: ${i.polished.rem(2)} solid initial;
        img, div{
          width: 100%;
          height: 100%;
        }
      }

      .layerlist-tools{
        .layerlist-tools-item{
          display: flex;
          /* justify-content: space-between; */
          margin-bottom: 8px;
        }
      }

      .map-selector-section .component-map-selector .form-control{
        width: 100%;
      }

      .data-selector-section, .map-selector-section{
        padding-top: 10px;
      }

    }
  `)},Object(i.jsx)("div",{className:"widget-setting-layerlist"},Object(i.jsx)(a.SettingSection,{title:this.props.intl.formatMessage({id:"sourceLabel",defaultMessage:c})},Object(i.jsx)(a.SettingRow,null,Object(i.jsx)("div",{className:"layerlist-tools w-100"},Object(i.jsx)("div",{className:"w-100"},Object(i.jsx)("div",{className:"layerlist-tools-item radio"},Object(i.jsx)(o.Radio,{id:"map-data",style:{cursor:"pointer"},name:"map-data",onChange:t=>this.onRadioChange(!1),checked:!this.state.useMapWidget}),Object(i.jsx)(o.Label,{style:{cursor:"pointer"},for:"map-data",className:"ml-1"},this.props.intl.formatMessage({id:"showLayerForMap",defaultMessage:g})))),Object(i.jsx)("div",{className:"w-100"},Object(i.jsx)("div",{className:"layerlist-tools-item radio"},Object(i.jsx)(o.Radio,{id:"map-view",style:{cursor:"pointer"},name:"map-view",onChange:t=>this.onRadioChange(!0),checked:this.state.useMapWidget}),Object(i.jsx)(o.Label,{style:{cursor:"pointer"},for:"map-view",className:"ml-1"},this.props.intl.formatMessage({id:"interactWithMap",defaultMessage:m})))))),s),Object(i.jsx)(a.SettingSection,{title:this.props.intl.formatMessage({id:"options",defaultMessage:d})},f,Object(i.jsx)(a.SettingRow,{label:Object(i.jsx)(i.FormattedMessage,{id:"information",defaultMessage:u})},Object(i.jsx)(o.Switch,{className:"can-x-switch",checked:this.props.config&&this.props.config.information||!1,"data-key":"information",onChange:t=>{this.onToolsChanged(t.target.checked,"information")}})),S)));var x}}j.mapExtraStateProps=t=>({dsJsons:t.appStateInBuilder.appConfig.dataSources})}}))}}}));