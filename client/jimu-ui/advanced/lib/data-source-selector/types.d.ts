import { DataSourceTypes as JimuCoreDataSourceTypes, ImmutableArray, UseDataSource, IMDataSourceJson } from 'jimu-core';
import { ArcGISDataSourceTypes } from 'jimu-arcgis';
/**
 * @ignore
 * AllDataSourceTypes, including types from jimu-core and jimu-arcgis, use `DataSourceSelectorProps.types`.
 * The variable is only used as `value`, e.g. const types = [AllDataSourceTypes.WebMap].
 */
export declare const AllDataSourceTypes: {
    Map: ArcGISDataSourceTypes.Map;
    WebMap: ArcGISDataSourceTypes.WebMap;
    WebScene: ArcGISDataSourceTypes.WebScene;
    SimpleLocal: JimuCoreDataSourceTypes.SimpleLocal;
    CSV: JimuCoreDataSourceTypes.CSV;
    FeatureLayer: JimuCoreDataSourceTypes.FeatureLayer;
    SceneLayer: JimuCoreDataSourceTypes.SceneLayer;
    GroupLayer: JimuCoreDataSourceTypes.GroupLayer;
    FeatureService: JimuCoreDataSourceTypes.FeatureService;
    MapService: JimuCoreDataSourceTypes.MapService;
    SceneService: JimuCoreDataSourceTypes.SceneService;
};
/**
 * All data source types, including types from jimu-core and jimu-arcgis, use `types` of `DataSourceSelectorProps`.
 * The variable is only used as `type`, e.g. let types: AllDataSourceTypes[].
 */
export declare type AllDataSourceTypes = JimuCoreDataSourceTypes | ArcGISDataSourceTypes;
/**
 * The DataSourceList component props.
 */
export interface DataSourceListProps {
    /**
     * If `true`, data sources are inited.
     */
    isDataSourceInited: boolean;
    /**
     * Supported data source types.
     */
    types: ImmutableArray<AllDataSourceTypes>;
    /**
     * Must pass `widgetId` to use parent widget's data view by default when using the same data source as parent widget.
     */
    widgetId?: string;
    /**
     * Only list child data sources generated by these root data sources.
     */
    fromRootDsIds?: ImmutableArray<string>;
    /**
     * Only list these data sources.
     */
    fromDsIds?: ImmutableArray<string>;
    /**
     * Whether to hide the data source in the list.
     */
    hideDs?: (dsJson: IMDataSourceJson) => boolean;
    /**
     * Selected data sources.
     */
    useDataSources?: ImmutableArray<UseDataSource>;
    /**
     * Whether to hide header of the component.
     */
    hideHeader?: boolean;
    /**
     * Whether to hide dropdown that is used to filter the list by data source type.
     */
    hideTypeDropdown?: boolean;
    /**
     * Whether to hide the add data button at bottom.
     */
    disableAddData?: boolean;
    /**
     * Whether to support multiple selection.
     */
    isMultiple?: boolean;
    /**
     * Before selecting the component, this will check the variable to make sure it can continue selecting.
     */
    disableSelection?: boolean;
    /**
     * Before removing the component, this will check the variable to make sure it can continue removing.
     */
    disableRemove?: boolean;
    /**
     * Allow to select output data sources which are generated by current widget itself.
     * Do not allow widgets to select these data sources by default.
     */
    enableToSelectOutputDsFromSelf?: boolean;
    /**
     * Callback when selected data sources are changed.
     */
    onChange?: (useDataSources: UseDataSource[]) => void;
    /**
     * Callback when close icon is clicked.
     */
    onCloseClick?: () => void;
    /**
     * Change data source init status, it will be necessary if the user is allowed to add new data source in the component.
     */
    changeInitStatus?: (isInitialized: boolean) => void;
    /**
     * only used by theme.
     */
    className?: string;
}
/**
 * @ignore
 */
export interface DataSourceItemProps {
    dataSourceJson: IMDataSourceJson;
    isMoreIconShown?: boolean;
    isCloseIconShown?: boolean;
    isRenameInputShown?: boolean;
    isRelatedWidgetsShown?: boolean;
    isMappingIconShown?: boolean;
    isErrorIconShown?: boolean;
    isSelected?: boolean;
    isHideable?: boolean;
    onDataSourceItemClick?: (dsJson: IMDataSourceJson) => void;
    onMappingIconClick?: (dsJson: IMDataSourceJson) => void;
    onCloseIconClick?: (dsJson: IMDataSourceJson) => void;
    onMoreIconClick?: (dsJson: IMDataSourceJson) => void;
    onRename?: (dsLabel: string) => void;
    onToggleHidden?: (dsJson: IMDataSourceJson) => void;
    onChildDataIconClick?: (dsJson: IMDataSourceJson) => void;
    onRelatedWidgetsIconClick?: (dsJson: IMDataSourceJson) => void;
    className?: string;
}
